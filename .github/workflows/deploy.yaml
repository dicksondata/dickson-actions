name: Deploy

on:
  workflow_call:
    inputs:
      # --- Container image inputs ---
      registry:
        description: "ECR registry URL"
        required: false
        type: string
      repository:
        description: "ECR repository name"
        required: false
        type: string
      version:
        description: "Image version/tag to deploy"
        required: false
        type: string
      # --- Kubernetes deployment inputs ---
      cluster:
        description: "Target EKS cluster name"
        required: true
        type: string
      namespace:
        description: "Target Kubernetes namespace"
        required: true
        type: string
      krane-dir:
        description: "Directory containing Krane templates"
        required: false
        type: string
      config-files:
        description: "Configuration files to include in deployment (space-separated)"
        required: false
        type: string
      # --- Infrastructure inputs ---
      aws-region:
        description: "AWS region for the EKS cluster"
        required: false
        type: string
        default: us-east-1
      kubectl-version:
        description: "Version of kubectl to install"
        required: false
        type: string
        default: v1.30.5
      # --- Manual approval inputs ---
      approval:
        description: "Enable manual approval before deployment"
        required: false
        type: boolean
        default: false
      approval-timeout:
        description: "Approval timeout in minutes"
        required: false
        type: number
        default: 60
      approvers:
        description: "GitHub users or teams who can approve"
        required: false
        type: string
        default: Admins
      minimum-approvals:
        description: "Minimum number of approvals required"
        required: false
        type: number
        default: 1
      approval-exclude-initiator:
        description: "Exclude workflow initiator from approvers"
        required: false
        type: boolean
        default: true
    secrets:
      aws-access-key-id:
        description: "AWS Access Key ID"
        required: true
      aws-secret-access-key:
        description: "AWS Secret Access Key"
        required: true
      approval-app-id:
        description: "GitHub App ID for approval workflow"
        required: false
      approval-private-key:
        description: "GitHub App private key for approval workflow"
        required: false

jobs:
  approval:
    if: inputs.approval
    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJSON(inputs.approval-timeout) }} # Can't be more than 60 minutes, because generated token expire after this time.
    steps:
      - name: Generate GitHub App token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.approval-app-id }}
          private_key: ${{ secrets.approval-private-key }}

      - name: Wait for manual approval
        id: approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ steps.generate_token.outputs.token }}
          approvers: ${{ inputs.approvers }}
          minimum-approvals: ${{ fromJSON(inputs.minimum-approvals) }}
          timeout-minutes: ${{ fromJSON(inputs.approval-timeout) }} # Can't be more than 60 minutes, because generated token expire after this time.
          issue-title: "Deployment Approval Required - ${{ inputs.cluster }}"
          issue-body: |
            A new deployment requires your approval.

            **Cluster:** ${{ inputs.cluster }}
            **Namespace:** ${{ inputs.namespace }}
            **Region:** ${{ inputs.aws-region }}

            If no approval is given within ${{ inputs.approval-timeout }} minutes, the workflow will timeout and need to be re-run.

            Please review and approve or reject this deployment.
          exclude-workflow-initiator-as-approver: ${{ inputs.approval-exclude-initiator }}

  deploy:
    needs: [approval]
    if: always() && (needs.approval.result == 'success' || needs.approval.result == 'skipped')
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    container:
      image: ruby:3.1-alpine3.19
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download workflow artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: decrypted-secrets
          path: .

      - name: Install system dependencies
        run: apk add --no-cache aws-cli build-base

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}

      - name: Install kubectl
        uses: Azure/setup-kubectl@v3
        with:
          version: ${{ inputs.kubectl-version }}
          
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ inputs.cluster }} --alias ${{ inputs.cluster }}

      - name: Install Krane
        run: gem install krane
      
      - name: Extract Docker metadata
        if: inputs.version == ''
        id: meta
        uses: docker/metadata-action@v4.1.1
        with:
          images: ${{ inputs.registry }}/${{ inputs.repository }}
          tags: type=sha

      - name: Deploy to Kubernetes
        run: |
          echo "Starting Kubernetes deployment..."

          if [ -n "${{ inputs.namespace }}" ]; then
            echo "Ensuring namespace '${{ inputs.namespace }}' exists..."
            kubectl create namespace ${{ inputs.namespace }} --dry-run=client -o yaml | kubectl apply -f -
            echo "Namespace '${{ inputs.namespace }}' ready"
          fi

          # Build bindings arguments from config files
          BINDINGS_ARGS=""
          
          # Add static config files first
          for config_file in ${{ inputs.config-files }}; do
            if [ -f "$config_file" ]; then
              echo "Adding static config file binding: $config_file"
              BINDINGS_ARGS="$BINDINGS_ARGS '@$config_file'"
            else
              echo "Warning: Static config file not found: $config_file"
            fi
          done

          # Auto-detect and add all decrypted files from artifacts
          echo "Searching for decrypted files..."
          if ls *.decrypted.yaml >/dev/null 2>&1; then
            for decrypted_file in *.decrypted.yaml; do
              echo "Adding decrypted file binding: $decrypted_file"
              BINDINGS_ARGS="$BINDINGS_ARGS '@$decrypted_file'"
            done
          else
            echo "No decrypted files found"
          fi

          # Add version binding
          VERSION="${{ inputs.version || steps.meta.outputs.version }}"
          echo "Using image version: $VERSION"
          BINDINGS_ARGS="$BINDINGS_ARGS version=$VERSION"

          echo "Final bindings: $BINDINGS_ARGS"
          echo "Command: krane render --filenames ${{ inputs.krane-dir }} --bindings=$BINDINGS_ARGS"
          
          krane render --filenames ${{ inputs.krane-dir }} --bindings=$BINDINGS_ARGS | \
          krane deploy ${{ inputs.namespace }} ${{ inputs.cluster }} -f -

          echo "Deployment completed successfully"
